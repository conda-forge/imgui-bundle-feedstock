diff --git a/external/hello_imgui/hello_imgui/hello_imgui_cmake/hello_imgui_build_lib.cmake b/external/hello_imgui/hello_imgui/hello_imgui_cmake/hello_imgui_build_lib.cmake
index 987e64f..a303849 100644
--- a/external/hello_imgui/hello_imgui/hello_imgui_cmake/hello_imgui_build_lib.cmake
+++ b/external/hello_imgui/hello_imgui/hello_imgui_cmake/hello_imgui_build_lib.cmake
@@ -279,12 +279,35 @@ function(him_build_imgui)
             _him_checkout_imgui_submodule_if_needed()
             _him_do_build_imgui()
         endif()
-        if (HELLOIMGUI_USE_FREETYPE)
-            _him_add_freetype_to_imgui()
-            if (HELLOIMGUI_USE_FREETYPE_PLUTOSVG)
-                _him_add_freetype_plutosvg_to_imgui()
-            endif()
+        if (WIN32)
+            # Using pkgconfig on windows just didn't work.
+            # Provide the full directories, hardcode this.
+            link_directories(imgui $ENV{LIBRARY_LIB})
+            target_link_libraries(imgui PUBLIC $ENV{LIBRARY_LIB}/plutovg.lib)
+            target_link_libraries(imgui PUBLIC $ENV{LIBRARY_LIB}/plutosvg.lib)
+            target_include_directories(imgui PRIVATE $ENV{LIBRARY_INC}/plutovg)
+            target_include_directories(imgui PRIVATE $ENV{LIBRARY_INC}/plutosvg)
+        else()
+            find_package(PkgConfig)
+            # Add the plutosvg include directory from the prefix
+            pkg_search_module(PLUTOVG REQUIRED plutovg)
+            target_link_libraries(imgui PRIVATE ${PLUTOVG_LIBRARIES})
+            target_include_directories(imgui PRIVATE ${PLUTOVG_INCLUDE_DIRS})
+
+            pkg_search_module(PLUTOSVG REQUIRED plutosvg)
+            target_link_libraries(imgui PRIVATE ${PLUTOSVG_LIBRARIES})
+            target_include_directories(imgui PRIVATE ${PLUTOSVG_INCLUDE_DIRS})
         endif()
+
+        find_package(Freetype REQUIRED)
+        target_link_libraries(imgui PRIVATE Freetype::Freetype)
+        target_compile_definitions(imgui PUBLIC IMGUI_ENABLE_FREETYPE)
+        target_compile_definitions(imgui PUBLIC IMGUI_ENABLE_FREETYPE_PLUTOSVG)
+            # 3. Add support for wchar32 (for emojis, and other unicode characters)
+        target_sources(imgui PRIVATE
+            ${HELLOIMGUI_IMGUI_SOURCE_DIR}/misc/freetype/imgui_freetype.cpp
+            ${HELLOIMGUI_IMGUI_SOURCE_DIR}/misc/freetype/imgui_freetype.h)
+        target_compile_definitions(imgui PUBLIC IMGUI_USE_WCHAR32)
     endif()
 endfunction()
 
@@ -294,7 +317,7 @@ function(him_install_imgui)
             return()
         endif()
 
-        install(TARGETS imgui DESTINATION ./lib/)
+        install(TARGETS imgui DESTINATION lib)
         file(GLOB imgui_headers
             ${HELLOIMGUI_IMGUI_SOURCE_DIR}/*.h
             ${HELLOIMGUI_IMGUI_SOURCE_DIR}/misc/cpp/*.h
@@ -433,7 +456,7 @@ function(_him_add_freetype_to_imgui)
     endif()
 
     # 2. Add freetype to imgui
-    target_link_libraries(imgui PUBLIC ${HIM_FREETYPE_LINKED_LIBRARY})
+    target_link_libraries(imgui PRIVATE ${HIM_FREETYPE_LINKED_LIBRARY})
     target_compile_definitions(imgui PUBLIC IMGUI_ENABLE_FREETYPE)
 
     # 3. Add support for wchar32 (for emojis, and other unicode characters)
diff --git a/imgui_bundle_cmake/internal/add_imgui_bundle_bindings.cmake b/imgui_bundle_cmake/internal/add_imgui_bundle_bindings.cmake
index 3dde3f5..45c7d4c 100644
--- a/imgui_bundle_cmake/internal/add_imgui_bundle_bindings.cmake
+++ b/imgui_bundle_cmake/internal/add_imgui_bundle_bindings.cmake
@@ -61,8 +61,6 @@ function(add_imgui_bundle_bindings)
     nanobind_add_module(${python_native_module_name} ${python_module_sources})
     target_compile_definitions(${python_native_module_name} PRIVATE VERSION_INFO=${PROJECT_VERSION})
 
-    litgen_setup_module(${bound_library} ${python_native_module_name} ${python_wrapper_module_name} ${IMGUI_BUNDLE_PATH}/bindings)
-
     # add cvnp for immvision
     if (IMGUI_BUNDLE_WITH_IMMVISION)
         set(cvnp_nano_dir ${IMGUI_BUNDLE_PATH}/external/immvision/cvnp_nano)
@@ -72,18 +70,22 @@ function(add_imgui_bundle_bindings)
         target_compile_definitions(${python_native_module_name} PUBLIC IMGUI_BUNDLE_WITH_IMMVISION)
     endif()
 
-    if(IMGUI_BUNDLE_BUILD_PYTHON)
-        # if using shared libraries, we need to set the rpath,
-        # so that dll/dylibs can be found in the same folder as imgui_bundle python lib.
-        _target_set_rpath(${python_native_module_name} ".")
-    endif()
-
     if (IMGUI_BUNDLE_BUILD_PYODIDE)
         ibd_pyodide_manually_link_sdl_to_bindings()
     endif()
 
+    find_package(OpenGL REQUIRED)
+    target_link_libraries(${python_native_module_name} PRIVATE OpenGL::GL)
+
     target_link_libraries(${python_native_module_name} PUBLIC ${bound_library})
 
+    find_package(OpenCV REQUIRED)
+    target_link_libraries(${python_native_module_name} PRIVATE ${OpenCV_LIBS})
+    find_library(FREETYPE_LIBRARIES freetype REQUIRED)
+    target_link_libraries(${python_native_module_name} PRIVATE ${FREETYPE_LIBRARIES})
+
+    litgen_setup_module(${bound_library} ${python_native_module_name} ${python_wrapper_module_name} ${IMGUI_BUNDLE_PATH}/bindings)
+
     # Link with OpenGL (necessary for nanobind)
     if (NOT  EMSCRIPTEN)
         find_package(OpenGL REQUIRED)
